
task-scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000119c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08001330  08001330  00011330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013f4  080013f4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080013f4  080013f4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f4  080013f4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f4  080013f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080013fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000088  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e39  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000587  00000000  00000000  00020ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00021458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b8  00000000  00000000  00021658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d62  00000000  00000000  00021810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a64  00000000  00000000  00024572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000992b  00000000  00000000  00025fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002f901  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d5c  00000000  00000000  0002f954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000064 	.word	0x20000064
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001318 	.word	0x08001318

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000068 	.word	0x20000068
 80001d0:	08001318 	.word	0x08001318

080001d4 <led_init_all>:
#include "led.h"

void led_init_all()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0


	led_off(LED_GREEN);
 80001d8:	200c      	movs	r0, #12
 80001da:	f000 f816 	bl	800020a <led_off>
	led_off(LED_ORANGE);
 80001de:	200d      	movs	r0, #13
 80001e0:	f000 f813 	bl	800020a <led_off>
	led_off(LED_RED);
 80001e4:	200e      	movs	r0, #14
 80001e6:	f000 f810 	bl	800020a <led_off>
	led_off(LED_BLUE);
 80001ea:	200f      	movs	r0, #15
 80001ec:	f000 f80d 	bl	800020a <led_off>
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <led_on>:

void led_on(uint8_t led_no)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]

}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr

0800020a <led_off>:

void led_off(uint8_t led_no)
{
 800020a:	b480      	push	{r7}
 800020c:	b083      	sub	sp, #12
 800020e:	af00      	add	r7, sp, #0
 8000210:	4603      	mov	r3, r0
 8000212:	71fb      	strb	r3, [r7, #7]

}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <main>:
void task2_handler();
void task3_handler();
void task4_handler();

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	enable_processor_faults();
 8000224:	f000 f812 	bl	800024c <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 8000228:	4807      	ldr	r0, [pc, #28]	; (8000248 <main+0x28>)
 800022a:	f000 f92f 	bl	800048c <init_scheduler_stack>

	init_tasks_stack();
 800022e:	f000 f933 	bl	8000498 <init_tasks_stack>

	led_init_all();
 8000232:	f7ff ffcf 	bl	80001d4 <led_init_all>

	init_systick_timer(TICK_HZ);
 8000236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023a:	f000 f9bb 	bl	80005b4 <init_systick_timer>

	switch_sp_to_psp();
 800023e:	f000 f891 	bl	8000364 <switch_sp_to_psp>

	task1_handler();
 8000242:	f000 f89f 	bl	8000384 <task1_handler>

    /* Loop forever */
	for(;;);
 8000246:	e7fe      	b.n	8000246 <main+0x26>
 8000248:	20008c00 	.word	0x20008c00

0800024c <enable_processor_faults>:
}

void enable_processor_faults()
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <enable_processor_faults+0x3c>)
 8000254:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); // Enable memmanage fault
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // Enable bus fault
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); // Enable usage fault
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000ed24 	.word	0xe000ed24

0800028c <get_psp_value>:

uint32_t get_psp_value()
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
	return userTasks[currentTask].pspValue;
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <get_psp_value+0x1c>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	4a05      	ldr	r2, [pc, #20]	; (80002ac <get_psp_value+0x20>)
 8000296:	011b      	lsls	r3, r3, #4
 8000298:	4413      	add	r3, r2
 800029a:	681b      	ldr	r3, [r3, #0]
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000080 	.word	0x20000080
 80002ac:	20000088 	.word	0x20000088

080002b0 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	userTasks[currentTask].pspValue = current_psp_value;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <save_psp_value+0x24>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <save_psp_value+0x28>)
 80002be:	011b      	lsls	r3, r3, #4
 80002c0:	4413      	add	r3, r2
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000080 	.word	0x20000080
 80002d8:	20000088 	.word	0x20000088

080002dc <update_next_task>:

void update_next_task()
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80002e2:	23ff      	movs	r3, #255	; 0xff
 80002e4:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < MAX_TASKS; i++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	603b      	str	r3, [r7, #0]
 80002ea:	e024      	b.n	8000336 <update_next_task+0x5a>
	{
		currentTask++;
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <update_next_task+0x7c>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	3301      	adds	r3, #1
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <update_next_task+0x7c>)
 80002f6:	701a      	strb	r2, [r3, #0]
		currentTask %= MAX_TASKS;
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <update_next_task+0x7c>)
 80002fa:	781a      	ldrb	r2, [r3, #0]
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <update_next_task+0x80>)
 80002fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000302:	0899      	lsrs	r1, r3, #2
 8000304:	460b      	mov	r3, r1
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	440b      	add	r3, r1
 800030a:	1ad3      	subs	r3, r2, r3
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <update_next_task+0x7c>)
 8000310:	701a      	strb	r2, [r3, #0]
		state = userTasks[currentTask].currentState;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <update_next_task+0x7c>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <update_next_task+0x84>)
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	4413      	add	r3, r2
 800031c:	3308      	adds	r3, #8
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	607b      	str	r3, [r7, #4]
		if ((state == TASK_READY_STATE) && (currentTask != 0))
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d103      	bne.n	8000330 <update_next_task+0x54>
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <update_next_task+0x7c>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d106      	bne.n	800033e <update_next_task+0x62>
	for (int i = 0; i < MAX_TASKS; i++)
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	603b      	str	r3, [r7, #0]
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	2b04      	cmp	r3, #4
 800033a:	ddd7      	ble.n	80002ec <update_next_task+0x10>
 800033c:	e000      	b.n	8000340 <update_next_task+0x64>
			break;
 800033e:	bf00      	nop
	}

	if (state != TASK_READY_STATE)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <update_next_task+0x70>
		currentTask = 0;
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <update_next_task+0x7c>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	20000080 	.word	0x20000080
 800035c:	cccccccd 	.word	0xcccccccd
 8000360:	20000088 	.word	0x20000088

08000364 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp()
{
	// Initialize PSP with task1 stack start
	__asm volatile("PUSH {LR};"); // Save LR which will return this function to the caller
 8000364:	b500      	push	{lr}
	__asm volatile("BL get_psp_value;"); // Get PSP of current task
 8000366:	f7ff ff91 	bl	800028c <get_psp_value>
	__asm volatile("MSR PSP, R0;"); // Save the current task's PSP value into the PSP register
 800036a:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR};"); // Load LR back from the stack
 800036e:	f85d eb04 	ldr.w	lr, [sp], #4

	// Change SP to PSP using control register
	__asm volatile("MOV R0, #0x02;");
 8000372:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0;");
 8000376:	f380 8814 	msr	CONTROL, r0

	// Return to the caller
	__asm volatile("BX LR;");
 800037a:	4770      	bx	lr
}
 800037c:	bf00      	nop

0800037e <idle_task>:

void idle_task()
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
	while(1);
 8000382:	e7fe      	b.n	8000382 <idle_task+0x4>

08000384 <task1_handler>:
}

void task1_handler()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000388:	200c      	movs	r0, #12
 800038a:	f7ff ff33 	bl	80001f4 <led_on>
		task_delay(1000);
 800038e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000392:	f000 f84b 	bl	800042c <task_delay>
		led_off(LED_GREEN);
 8000396:	200c      	movs	r0, #12
 8000398:	f7ff ff37 	bl	800020a <led_off>
		task_delay(1000);
 800039c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a0:	f000 f844 	bl	800042c <task_delay>
		led_on(LED_GREEN);
 80003a4:	e7f0      	b.n	8000388 <task1_handler+0x4>

080003a6 <task2_handler>:
	}
}

void task2_handler()
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 80003aa:	200d      	movs	r0, #13
 80003ac:	f7ff ff22 	bl	80001f4 <led_on>
		task_delay(500);
 80003b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b4:	f000 f83a 	bl	800042c <task_delay>
		led_off(LED_ORANGE);
 80003b8:	200d      	movs	r0, #13
 80003ba:	f7ff ff26 	bl	800020a <led_off>
		task_delay(500);
 80003be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c2:	f000 f833 	bl	800042c <task_delay>
		led_on(LED_ORANGE);
 80003c6:	e7f0      	b.n	80003aa <task2_handler+0x4>

080003c8 <task3_handler>:
	}
}

void task3_handler()
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 80003cc:	200f      	movs	r0, #15
 80003ce:	f7ff ff11 	bl	80001f4 <led_on>
		task_delay(250);
 80003d2:	20fa      	movs	r0, #250	; 0xfa
 80003d4:	f000 f82a 	bl	800042c <task_delay>
		led_off(LED_BLUE);
 80003d8:	200f      	movs	r0, #15
 80003da:	f7ff ff16 	bl	800020a <led_off>
		task_delay(250);
 80003de:	20fa      	movs	r0, #250	; 0xfa
 80003e0:	f000 f824 	bl	800042c <task_delay>
		led_on(LED_BLUE);
 80003e4:	e7f2      	b.n	80003cc <task3_handler+0x4>

080003e6 <task4_handler>:
	}
}

void task4_handler()
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 80003ea:	200e      	movs	r0, #14
 80003ec:	f7ff ff02 	bl	80001f4 <led_on>
		task_delay(125);
 80003f0:	207d      	movs	r0, #125	; 0x7d
 80003f2:	f000 f81b 	bl	800042c <task_delay>
		led_off(LED_RED);
 80003f6:	200e      	movs	r0, #14
 80003f8:	f7ff ff07 	bl	800020a <led_off>
		task_delay(125);
 80003fc:	207d      	movs	r0, #125	; 0x7d
 80003fe:	f000 f815 	bl	800042c <task_delay>
		led_on(LED_RED);
 8000402:	e7f2      	b.n	80003ea <task4_handler+0x4>

08000404 <schedule>:
	}
}

void schedule()
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
	// Pend the PendSV exception
	uint32_t* pICSR = (uint32_t*)0xE000ED04;
 800040a:	4b07      	ldr	r3, [pc, #28]	; (8000428 <schedule+0x24>)
 800040c:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	601a      	str	r2, [r3, #0]
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	e000ed04 	.word	0xe000ed04

0800042c <task_delay>:
#define INTERRUPT_DISABLE() do { __asm volatile("MOV R0, #0x01;"); __asm volatile("MSR PRIMASK, R0;"); } while(0)

#define INTERRUPT_ENABLE() do { __asm volatile("MOV R0, #0x00;"); __asm volatile("MSR PRIMASK, R0;"); } while(0)

void task_delay(uint32_t tickCount)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	INTERRUPT_DISABLE();
 8000434:	f04f 0001 	mov.w	r0, #1
 8000438:	f380 8810 	msr	PRIMASK, r0

	// Delay only if current task is not 0 i.e. idle task
	if (currentTask)
 800043c:	4b10      	ldr	r3, [pc, #64]	; (8000480 <task_delay+0x54>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d015      	beq.n	8000470 <task_delay+0x44>
	{
		userTasks[currentTask].blockCount = g_tickCount + tickCount;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <task_delay+0x58>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <task_delay+0x54>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	441a      	add	r2, r3
 8000452:	490d      	ldr	r1, [pc, #52]	; (8000488 <task_delay+0x5c>)
 8000454:	0103      	lsls	r3, r0, #4
 8000456:	440b      	add	r3, r1
 8000458:	3304      	adds	r3, #4
 800045a:	601a      	str	r2, [r3, #0]
		userTasks[currentTask].currentState = TASK_BLOCKED_STATE;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <task_delay+0x54>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <task_delay+0x5c>)
 8000462:	011b      	lsls	r3, r3, #4
 8000464:	4413      	add	r3, r2
 8000466:	3308      	adds	r3, #8
 8000468:	22ff      	movs	r2, #255	; 0xff
 800046a:	701a      	strb	r2, [r3, #0]
		schedule();
 800046c:	f7ff ffca 	bl	8000404 <schedule>
	}

	INTERRUPT_ENABLE();
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	f380 8810 	msr	PRIMASK, r0
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000080 	.word	0x20000080
 8000484:	20000084 	.word	0x20000084
 8000488:	20000088 	.word	0x20000088

0800048c <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t schedStackStart)
{
 800048c:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0;":: "r"(schedStackStart) :);
 800048e:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR;");
 8000492:	4770      	bx	lr
}
 8000494:	bf00      	nop
	...

08000498 <init_tasks_stack>:

void init_tasks_stack()
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
	userTasks[0].currentState = TASK_READY_STATE;
 800049e:	4b3a      	ldr	r3, [pc, #232]	; (8000588 <init_tasks_stack+0xf0>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	721a      	strb	r2, [r3, #8]
	userTasks[1].currentState = TASK_READY_STATE;
 80004a4:	4b38      	ldr	r3, [pc, #224]	; (8000588 <init_tasks_stack+0xf0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	761a      	strb	r2, [r3, #24]
	userTasks[2].currentState = TASK_READY_STATE;
 80004aa:	4b37      	ldr	r3, [pc, #220]	; (8000588 <init_tasks_stack+0xf0>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	userTasks[3].currentState = TASK_READY_STATE;
 80004b2:	4b35      	ldr	r3, [pc, #212]	; (8000588 <init_tasks_stack+0xf0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	userTasks[4].currentState = TASK_READY_STATE;
 80004ba:	4b33      	ldr	r3, [pc, #204]	; (8000588 <init_tasks_stack+0xf0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	userTasks[0].pspValue = IDLE_STACK_START;
 80004c2:	4b31      	ldr	r3, [pc, #196]	; (8000588 <init_tasks_stack+0xf0>)
 80004c4:	4a31      	ldr	r2, [pc, #196]	; (800058c <init_tasks_stack+0xf4>)
 80004c6:	601a      	str	r2, [r3, #0]
	userTasks[1].pspValue = T1_STACK_START;
 80004c8:	4b2f      	ldr	r3, [pc, #188]	; (8000588 <init_tasks_stack+0xf0>)
 80004ca:	4a31      	ldr	r2, [pc, #196]	; (8000590 <init_tasks_stack+0xf8>)
 80004cc:	611a      	str	r2, [r3, #16]
	userTasks[2].pspValue = T2_STACK_START;
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <init_tasks_stack+0xf0>)
 80004d0:	4a30      	ldr	r2, [pc, #192]	; (8000594 <init_tasks_stack+0xfc>)
 80004d2:	621a      	str	r2, [r3, #32]
	userTasks[3].pspValue = T3_STACK_START;
 80004d4:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <init_tasks_stack+0xf0>)
 80004d6:	4a30      	ldr	r2, [pc, #192]	; (8000598 <init_tasks_stack+0x100>)
 80004d8:	631a      	str	r2, [r3, #48]	; 0x30
	userTasks[4].pspValue = T4_STACK_START;
 80004da:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <init_tasks_stack+0xf0>)
 80004dc:	4a2f      	ldr	r2, [pc, #188]	; (800059c <init_tasks_stack+0x104>)
 80004de:	641a      	str	r2, [r3, #64]	; 0x40

	userTasks[0].taskHandler = idle_task;
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <init_tasks_stack+0xf0>)
 80004e2:	4a2f      	ldr	r2, [pc, #188]	; (80005a0 <init_tasks_stack+0x108>)
 80004e4:	60da      	str	r2, [r3, #12]
	userTasks[1].taskHandler = task1_handler;
 80004e6:	4b28      	ldr	r3, [pc, #160]	; (8000588 <init_tasks_stack+0xf0>)
 80004e8:	4a2e      	ldr	r2, [pc, #184]	; (80005a4 <init_tasks_stack+0x10c>)
 80004ea:	61da      	str	r2, [r3, #28]
	userTasks[2].taskHandler = task2_handler;
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <init_tasks_stack+0xf0>)
 80004ee:	4a2e      	ldr	r2, [pc, #184]	; (80005a8 <init_tasks_stack+0x110>)
 80004f0:	62da      	str	r2, [r3, #44]	; 0x2c
	userTasks[3].taskHandler = task3_handler;
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <init_tasks_stack+0xf0>)
 80004f4:	4a2d      	ldr	r2, [pc, #180]	; (80005ac <init_tasks_stack+0x114>)
 80004f6:	63da      	str	r2, [r3, #60]	; 0x3c
	userTasks[4].taskHandler = task4_handler;
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <init_tasks_stack+0xf0>)
 80004fa:	4a2d      	ldr	r2, [pc, #180]	; (80005b0 <init_tasks_stack+0x118>)
 80004fc:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t* pPSP;

	for (int i = 0; i < MAX_TASKS; i++)
 80004fe:	2300      	movs	r3, #0
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	e037      	b.n	8000574 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*)userTasks[i].pspValue;
 8000504:	4a20      	ldr	r2, [pc, #128]	; (8000588 <init_tasks_stack+0xf0>)
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	4413      	add	r3, r2
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	60fb      	str	r3, [r7, #12]

		// Decrementing stack pointer first since the stack is full descending
		// Initialize xPSR
		pPSP--;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3b04      	subs	r3, #4
 8000514:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x01000000
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800051c:	601a      	str	r2, [r3, #0]

		// Initialize PC
		pPSP--;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	3b04      	subs	r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)userTasks[i].taskHandler;
 8000524:	4a18      	ldr	r2, [pc, #96]	; (8000588 <init_tasks_stack+0xf0>)
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	4413      	add	r3, r2
 800052c:	330c      	adds	r3, #12
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	601a      	str	r2, [r3, #0]

		// Initialize LR
		pPSP--;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3b04      	subs	r3, #4
 800053a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD; // Value of EXEC_RETURN
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f06f 0202 	mvn.w	r2, #2
 8000542:	601a      	str	r2, [r3, #0]

		// Initialize general registers
		for (int j = 0; j < 13; j++)
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	e008      	b.n	800055c <init_tasks_stack+0xc4>
		{
			pPSP--;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3b04      	subs	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3301      	adds	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b0c      	cmp	r3, #12
 8000560:	ddf3      	ble.n	800054a <init_tasks_stack+0xb2>
		}

		// Update current task PSP
		userTasks[i].pspValue = (uint32_t)pPSP;
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	4908      	ldr	r1, [pc, #32]	; (8000588 <init_tasks_stack+0xf0>)
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	440b      	add	r3, r1
 800056c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++)
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	3301      	adds	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	2b04      	cmp	r3, #4
 8000578:	ddc4      	ble.n	8000504 <init_tasks_stack+0x6c>
	}
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	20000088 	.word	0x20000088
 800058c:	20009000 	.word	0x20009000
 8000590:	2000a000 	.word	0x2000a000
 8000594:	20009c00 	.word	0x20009c00
 8000598:	20009800 	.word	0x20009800
 800059c:	20009400 	.word	0x20009400
 80005a0:	0800037f 	.word	0x0800037f
 80005a4:	08000385 	.word	0x08000385
 80005a8:	080003a7 	.word	0x080003a7
 80005ac:	080003c9 	.word	0x080003c9
 80005b0:	080003e7 	.word	0x080003e7

080005b4 <init_systick_timer>:

void init_systick_timer(uint32_t tickHz)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <init_systick_timer+0x4c>)
 80005be:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <init_systick_timer+0x50>)
 80005c2:	613b      	str	r3, [r7, #16]
	uint32_t countValue = SYSTICK_TIM_CLK / tickHz - 1;
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <init_systick_timer+0x54>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005cc:	3b01      	subs	r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]

	// Clear existing SRVR value
	*pSRVR &= ~(0x00FFFFFF);
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	601a      	str	r2, [r3, #0]

	// Load the reload value into SRVR
	*pSRVR |= countValue;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	431a      	orrs	r2, r3
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	601a      	str	r2, [r3, #0]

	// Configure SCSR
	*pSCSR |= 7;
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f043 0207 	orr.w	r2, r3, #7
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	371c      	adds	r7, #28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000e014 	.word	0xe000e014
 8000604:	e000e010 	.word	0xe000e010
 8000608:	00f42400 	.word	0x00f42400

0800060c <HardFault_Handler>:

void HardFault_Handler()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 8000610:	4801      	ldr	r0, [pc, #4]	; (8000618 <HardFault_Handler+0xc>)
 8000612:	f000 f9f1 	bl	80009f8 <puts>
	while(1);
 8000616:	e7fe      	b.n	8000616 <HardFault_Handler+0xa>
 8000618:	08001330 	.word	0x08001330

0800061c <MemManage_Handler>:
}

void MemManage_Handler()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	printf("Exception: MemManageFault\n");
 8000620:	4801      	ldr	r0, [pc, #4]	; (8000628 <MemManage_Handler+0xc>)
 8000622:	f000 f9e9 	bl	80009f8 <puts>
	while(1);
 8000626:	e7fe      	b.n	8000626 <MemManage_Handler+0xa>
 8000628:	08001348 	.word	0x08001348

0800062c <BusFault_Handler>:
}

void BusFault_Handler()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 8000630:	4801      	ldr	r0, [pc, #4]	; (8000638 <BusFault_Handler+0xc>)
 8000632:	f000 f9e1 	bl	80009f8 <puts>
	while(1);
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0xa>
 8000638:	08001364 	.word	0x08001364

0800063c <UsageFault_Handler>:
}

void UsageFault_Handler()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	printf("Exception: UsageFault\n");
 8000640:	4801      	ldr	r0, [pc, #4]	; (8000648 <UsageFault_Handler+0xc>)
 8000642:	f000 f9d9 	bl	80009f8 <puts>
	while(1);
 8000646:	e7fe      	b.n	8000646 <UsageFault_Handler+0xa>
 8000648:	08001378 	.word	0x08001378

0800064c <PendSV_Handler>:
__attribute__((naked)) void PendSV_Handler()
{
	// Save the context of current task

		// Get the current task's PSP
		__asm volatile("MRS R0, PSP;");
 800064c:	f3ef 8009 	mrs	r0, PSP

		// Using the PSP, save SF2(R4 - R11)
		__asm volatile("STMDB R0!, {R4-R11};");
 8000650:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// Preserve LR to be able to properly exit current interrupt handler
		__asm volatile("PUSH {LR};");
 8000654:	b500      	push	{lr}

		// Save the current value of PSP
		__asm volatile("BL save_psp_value;"); // R0 already has the current PSP value
 8000656:	f7ff fe2b 	bl	80002b0 <save_psp_value>

		// Retrieve the context of next task

		// Decide next task to run
		__asm volatile("BL update_next_task;");
 800065a:	f7ff fe3f 	bl	80002dc <update_next_task>

		// Get its past PSP value
		__asm volatile("BL get_psp_value;");
 800065e:	f7ff fe15 	bl	800028c <get_psp_value>

		// Using retrieved PSP, retrieve SF2(R4 - R11)
		__asm volatile("LDMIA R0!, {R4-R11};");
 8000662:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// Update PSP and exit
		__asm volatile("MSR PSP, R0;");
 8000666:	f380 8809 	msr	PSP, r0

		// Load back LR to be able to properly exit current interrupt handler
		__asm volatile("POP {LR};");
 800066a:	f85d eb04 	ldr.w	lr, [sp], #4

		// Exit current interrupt handler
		__asm volatile("BX LR;");
 800066e:	4770      	bx	lr
}
 8000670:	bf00      	nop
	...

08000674 <update_global_tick_count>:

void update_global_tick_count()
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	g_tickCount++;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <update_global_tick_count+0x18>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a03      	ldr	r2, [pc, #12]	; (800068c <update_global_tick_count+0x18>)
 8000680:	6013      	str	r3, [r2, #0]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	20000084 	.word	0x20000084

08000690 <unblock_tasks>:

void unblock_tasks()
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
	for (int i = 1; i < MAX_TASKS; i++)
 8000696:	2301      	movs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e01b      	b.n	80006d4 <unblock_tasks+0x44>
	{
		if (userTasks[i].currentState != TASK_READY_STATE)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <unblock_tasks+0x58>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	4413      	add	r3, r2
 80006a4:	3308      	adds	r3, #8
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d010      	beq.n	80006ce <unblock_tasks+0x3e>
		{
			if (userTasks[i].blockCount == g_tickCount)
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <unblock_tasks+0x58>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	4413      	add	r3, r2
 80006b4:	3304      	adds	r3, #4
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <unblock_tasks+0x5c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d106      	bne.n	80006ce <unblock_tasks+0x3e>
			{
				userTasks[i].currentState = TASK_READY_STATE;
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <unblock_tasks+0x58>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	3308      	adds	r3, #8
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < MAX_TASKS; i++)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3301      	adds	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	dde0      	ble.n	800069c <unblock_tasks+0xc>
			}
		}
	}
}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	20000088 	.word	0x20000088
 80006ec:	20000084 	.word	0x20000084

080006f0 <SysTick_Handler>:

void SysTick_Handler()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
	uint32_t* pICSR = (uint32_t*)0xE000ED04;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <SysTick_Handler+0x28>)
 80006f8:	607b      	str	r3, [r7, #4]

	update_global_tick_count();
 80006fa:	f7ff ffbb 	bl	8000674 <update_global_tick_count>
	unblock_tasks();
 80006fe:	f7ff ffc7 	bl	8000690 <unblock_tasks>

	// Pend the PendSV exception
	*pICSR |= (1 << 28);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	e000ed04 	.word	0xe000ed04

0800071c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	e00a      	b.n	8000744 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800072e:	f3af 8000 	nop.w
 8000732:	4601      	mov	r1, r0
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	60ba      	str	r2, [r7, #8]
 800073a:	b2ca      	uxtb	r2, r1
 800073c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3301      	adds	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697a      	ldr	r2, [r7, #20]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	dbf0      	blt.n	800072e <_read+0x12>
	}

return len;
 800074c:	687b      	ldr	r3, [r7, #4]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b086      	sub	sp, #24
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	e009      	b.n	800077c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	60ba      	str	r2, [r7, #8]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	3301      	adds	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	429a      	cmp	r2, r3
 8000782:	dbf1      	blt.n	8000768 <_write+0x12>
	}
	return len;
 8000784:	687b      	ldr	r3, [r7, #4]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <_close>:

int _close(int file)
{
 800078e:	b480      	push	{r7}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	return -1;
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b6:	605a      	str	r2, [r3, #4]
	return 0;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <_isatty>:

int _isatty(int file)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
	return 1;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
	return 0;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <_sbrk+0x5c>)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <_sbrk+0x60>)
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <_sbrk+0x64>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <_sbrk+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	429a      	cmp	r2, r3
 8000826:	d207      	bcs.n	8000838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000828:	f000 f846 	bl	80008b8 <__errno>
 800082c:	4603      	mov	r3, r0
 800082e:	220c      	movs	r2, #12
 8000830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	e009      	b.n	800084c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <_sbrk+0x64>)
 8000848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084a:	68fb      	ldr	r3, [r7, #12]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000a000 	.word	0x2000a000
 8000858:	00000400 	.word	0x00000400
 800085c:	200000d8 	.word	0x200000d8
 8000860:	200000f0 	.word	0x200000f0

08000864 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000866:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000868:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800086e:	490d      	ldr	r1, [pc, #52]	; (80008a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <LoopForever+0xe>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000884:	4c0a      	ldr	r4, [pc, #40]	; (80008b0 <LoopForever+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000892:	f000 f817 	bl	80008c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff fcc3 	bl	8000220 <main>

0800089a <LoopForever>:

LoopForever:
    b LoopForever
 800089a:	e7fe      	b.n	800089a <LoopForever>
  ldr   r0, =_estack
 800089c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80008a8:	080013fc 	.word	0x080013fc
  ldr r2, =_sbss
 80008ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80008b0:	200000ec 	.word	0x200000ec

080008b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_2_IRQHandler>
	...

080008b8 <__errno>:
 80008b8:	4b01      	ldr	r3, [pc, #4]	; (80008c0 <__errno+0x8>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000000 	.word	0x20000000

080008c4 <__libc_init_array>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	4d0d      	ldr	r5, [pc, #52]	; (80008fc <__libc_init_array+0x38>)
 80008c8:	4c0d      	ldr	r4, [pc, #52]	; (8000900 <__libc_init_array+0x3c>)
 80008ca:	1b64      	subs	r4, r4, r5
 80008cc:	10a4      	asrs	r4, r4, #2
 80008ce:	2600      	movs	r6, #0
 80008d0:	42a6      	cmp	r6, r4
 80008d2:	d109      	bne.n	80008e8 <__libc_init_array+0x24>
 80008d4:	4d0b      	ldr	r5, [pc, #44]	; (8000904 <__libc_init_array+0x40>)
 80008d6:	4c0c      	ldr	r4, [pc, #48]	; (8000908 <__libc_init_array+0x44>)
 80008d8:	f000 fd1e 	bl	8001318 <_init>
 80008dc:	1b64      	subs	r4, r4, r5
 80008de:	10a4      	asrs	r4, r4, #2
 80008e0:	2600      	movs	r6, #0
 80008e2:	42a6      	cmp	r6, r4
 80008e4:	d105      	bne.n	80008f2 <__libc_init_array+0x2e>
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ec:	4798      	blx	r3
 80008ee:	3601      	adds	r6, #1
 80008f0:	e7ee      	b.n	80008d0 <__libc_init_array+0xc>
 80008f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f6:	4798      	blx	r3
 80008f8:	3601      	adds	r6, #1
 80008fa:	e7f2      	b.n	80008e2 <__libc_init_array+0x1e>
 80008fc:	080013f4 	.word	0x080013f4
 8000900:	080013f4 	.word	0x080013f4
 8000904:	080013f4 	.word	0x080013f4
 8000908:	080013f8 	.word	0x080013f8

0800090c <memset>:
 800090c:	4402      	add	r2, r0
 800090e:	4603      	mov	r3, r0
 8000910:	4293      	cmp	r3, r2
 8000912:	d100      	bne.n	8000916 <memset+0xa>
 8000914:	4770      	bx	lr
 8000916:	f803 1b01 	strb.w	r1, [r3], #1
 800091a:	e7f9      	b.n	8000910 <memset+0x4>

0800091c <_puts_r>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	460e      	mov	r6, r1
 8000920:	4605      	mov	r5, r0
 8000922:	b118      	cbz	r0, 800092c <_puts_r+0x10>
 8000924:	6983      	ldr	r3, [r0, #24]
 8000926:	b90b      	cbnz	r3, 800092c <_puts_r+0x10>
 8000928:	f000 fa48 	bl	8000dbc <__sinit>
 800092c:	69ab      	ldr	r3, [r5, #24]
 800092e:	68ac      	ldr	r4, [r5, #8]
 8000930:	b913      	cbnz	r3, 8000938 <_puts_r+0x1c>
 8000932:	4628      	mov	r0, r5
 8000934:	f000 fa42 	bl	8000dbc <__sinit>
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <_puts_r+0xd0>)
 800093a:	429c      	cmp	r4, r3
 800093c:	d120      	bne.n	8000980 <_puts_r+0x64>
 800093e:	686c      	ldr	r4, [r5, #4]
 8000940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000942:	07db      	lsls	r3, r3, #31
 8000944:	d405      	bmi.n	8000952 <_puts_r+0x36>
 8000946:	89a3      	ldrh	r3, [r4, #12]
 8000948:	0598      	lsls	r0, r3, #22
 800094a:	d402      	bmi.n	8000952 <_puts_r+0x36>
 800094c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800094e:	f000 fad3 	bl	8000ef8 <__retarget_lock_acquire_recursive>
 8000952:	89a3      	ldrh	r3, [r4, #12]
 8000954:	0719      	lsls	r1, r3, #28
 8000956:	d51d      	bpl.n	8000994 <_puts_r+0x78>
 8000958:	6923      	ldr	r3, [r4, #16]
 800095a:	b1db      	cbz	r3, 8000994 <_puts_r+0x78>
 800095c:	3e01      	subs	r6, #1
 800095e:	68a3      	ldr	r3, [r4, #8]
 8000960:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000964:	3b01      	subs	r3, #1
 8000966:	60a3      	str	r3, [r4, #8]
 8000968:	bb39      	cbnz	r1, 80009ba <_puts_r+0x9e>
 800096a:	2b00      	cmp	r3, #0
 800096c:	da38      	bge.n	80009e0 <_puts_r+0xc4>
 800096e:	4622      	mov	r2, r4
 8000970:	210a      	movs	r1, #10
 8000972:	4628      	mov	r0, r5
 8000974:	f000 f848 	bl	8000a08 <__swbuf_r>
 8000978:	3001      	adds	r0, #1
 800097a:	d011      	beq.n	80009a0 <_puts_r+0x84>
 800097c:	250a      	movs	r5, #10
 800097e:	e011      	b.n	80009a4 <_puts_r+0x88>
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <_puts_r+0xd4>)
 8000982:	429c      	cmp	r4, r3
 8000984:	d101      	bne.n	800098a <_puts_r+0x6e>
 8000986:	68ac      	ldr	r4, [r5, #8]
 8000988:	e7da      	b.n	8000940 <_puts_r+0x24>
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <_puts_r+0xd8>)
 800098c:	429c      	cmp	r4, r3
 800098e:	bf08      	it	eq
 8000990:	68ec      	ldreq	r4, [r5, #12]
 8000992:	e7d5      	b.n	8000940 <_puts_r+0x24>
 8000994:	4621      	mov	r1, r4
 8000996:	4628      	mov	r0, r5
 8000998:	f000 f888 	bl	8000aac <__swsetup_r>
 800099c:	2800      	cmp	r0, #0
 800099e:	d0dd      	beq.n	800095c <_puts_r+0x40>
 80009a0:	f04f 35ff 	mov.w	r5, #4294967295
 80009a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009a6:	07da      	lsls	r2, r3, #31
 80009a8:	d405      	bmi.n	80009b6 <_puts_r+0x9a>
 80009aa:	89a3      	ldrh	r3, [r4, #12]
 80009ac:	059b      	lsls	r3, r3, #22
 80009ae:	d402      	bmi.n	80009b6 <_puts_r+0x9a>
 80009b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009b2:	f000 faa2 	bl	8000efa <__retarget_lock_release_recursive>
 80009b6:	4628      	mov	r0, r5
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	da04      	bge.n	80009c8 <_puts_r+0xac>
 80009be:	69a2      	ldr	r2, [r4, #24]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dc06      	bgt.n	80009d2 <_puts_r+0xb6>
 80009c4:	290a      	cmp	r1, #10
 80009c6:	d004      	beq.n	80009d2 <_puts_r+0xb6>
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	6022      	str	r2, [r4, #0]
 80009ce:	7019      	strb	r1, [r3, #0]
 80009d0:	e7c5      	b.n	800095e <_puts_r+0x42>
 80009d2:	4622      	mov	r2, r4
 80009d4:	4628      	mov	r0, r5
 80009d6:	f000 f817 	bl	8000a08 <__swbuf_r>
 80009da:	3001      	adds	r0, #1
 80009dc:	d1bf      	bne.n	800095e <_puts_r+0x42>
 80009de:	e7df      	b.n	80009a0 <_puts_r+0x84>
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	250a      	movs	r5, #10
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	6022      	str	r2, [r4, #0]
 80009e8:	701d      	strb	r5, [r3, #0]
 80009ea:	e7db      	b.n	80009a4 <_puts_r+0x88>
 80009ec:	080013b4 	.word	0x080013b4
 80009f0:	080013d4 	.word	0x080013d4
 80009f4:	08001394 	.word	0x08001394

080009f8 <puts>:
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <puts+0xc>)
 80009fa:	4601      	mov	r1, r0
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	f7ff bf8d 	b.w	800091c <_puts_r>
 8000a02:	bf00      	nop
 8000a04:	20000000 	.word	0x20000000

08000a08 <__swbuf_r>:
 8000a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0a:	460e      	mov	r6, r1
 8000a0c:	4614      	mov	r4, r2
 8000a0e:	4605      	mov	r5, r0
 8000a10:	b118      	cbz	r0, 8000a1a <__swbuf_r+0x12>
 8000a12:	6983      	ldr	r3, [r0, #24]
 8000a14:	b90b      	cbnz	r3, 8000a1a <__swbuf_r+0x12>
 8000a16:	f000 f9d1 	bl	8000dbc <__sinit>
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <__swbuf_r+0x98>)
 8000a1c:	429c      	cmp	r4, r3
 8000a1e:	d12b      	bne.n	8000a78 <__swbuf_r+0x70>
 8000a20:	686c      	ldr	r4, [r5, #4]
 8000a22:	69a3      	ldr	r3, [r4, #24]
 8000a24:	60a3      	str	r3, [r4, #8]
 8000a26:	89a3      	ldrh	r3, [r4, #12]
 8000a28:	071a      	lsls	r2, r3, #28
 8000a2a:	d52f      	bpl.n	8000a8c <__swbuf_r+0x84>
 8000a2c:	6923      	ldr	r3, [r4, #16]
 8000a2e:	b36b      	cbz	r3, 8000a8c <__swbuf_r+0x84>
 8000a30:	6923      	ldr	r3, [r4, #16]
 8000a32:	6820      	ldr	r0, [r4, #0]
 8000a34:	1ac0      	subs	r0, r0, r3
 8000a36:	6963      	ldr	r3, [r4, #20]
 8000a38:	b2f6      	uxtb	r6, r6
 8000a3a:	4283      	cmp	r3, r0
 8000a3c:	4637      	mov	r7, r6
 8000a3e:	dc04      	bgt.n	8000a4a <__swbuf_r+0x42>
 8000a40:	4621      	mov	r1, r4
 8000a42:	4628      	mov	r0, r5
 8000a44:	f000 f926 	bl	8000c94 <_fflush_r>
 8000a48:	bb30      	cbnz	r0, 8000a98 <__swbuf_r+0x90>
 8000a4a:	68a3      	ldr	r3, [r4, #8]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	60a3      	str	r3, [r4, #8]
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	6022      	str	r2, [r4, #0]
 8000a56:	701e      	strb	r6, [r3, #0]
 8000a58:	6963      	ldr	r3, [r4, #20]
 8000a5a:	3001      	adds	r0, #1
 8000a5c:	4283      	cmp	r3, r0
 8000a5e:	d004      	beq.n	8000a6a <__swbuf_r+0x62>
 8000a60:	89a3      	ldrh	r3, [r4, #12]
 8000a62:	07db      	lsls	r3, r3, #31
 8000a64:	d506      	bpl.n	8000a74 <__swbuf_r+0x6c>
 8000a66:	2e0a      	cmp	r6, #10
 8000a68:	d104      	bne.n	8000a74 <__swbuf_r+0x6c>
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f000 f911 	bl	8000c94 <_fflush_r>
 8000a72:	b988      	cbnz	r0, 8000a98 <__swbuf_r+0x90>
 8000a74:	4638      	mov	r0, r7
 8000a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <__swbuf_r+0x9c>)
 8000a7a:	429c      	cmp	r4, r3
 8000a7c:	d101      	bne.n	8000a82 <__swbuf_r+0x7a>
 8000a7e:	68ac      	ldr	r4, [r5, #8]
 8000a80:	e7cf      	b.n	8000a22 <__swbuf_r+0x1a>
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <__swbuf_r+0xa0>)
 8000a84:	429c      	cmp	r4, r3
 8000a86:	bf08      	it	eq
 8000a88:	68ec      	ldreq	r4, [r5, #12]
 8000a8a:	e7ca      	b.n	8000a22 <__swbuf_r+0x1a>
 8000a8c:	4621      	mov	r1, r4
 8000a8e:	4628      	mov	r0, r5
 8000a90:	f000 f80c 	bl	8000aac <__swsetup_r>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d0cb      	beq.n	8000a30 <__swbuf_r+0x28>
 8000a98:	f04f 37ff 	mov.w	r7, #4294967295
 8000a9c:	e7ea      	b.n	8000a74 <__swbuf_r+0x6c>
 8000a9e:	bf00      	nop
 8000aa0:	080013b4 	.word	0x080013b4
 8000aa4:	080013d4 	.word	0x080013d4
 8000aa8:	08001394 	.word	0x08001394

08000aac <__swsetup_r>:
 8000aac:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <__swsetup_r+0xcc>)
 8000aae:	b570      	push	{r4, r5, r6, lr}
 8000ab0:	681d      	ldr	r5, [r3, #0]
 8000ab2:	4606      	mov	r6, r0
 8000ab4:	460c      	mov	r4, r1
 8000ab6:	b125      	cbz	r5, 8000ac2 <__swsetup_r+0x16>
 8000ab8:	69ab      	ldr	r3, [r5, #24]
 8000aba:	b913      	cbnz	r3, 8000ac2 <__swsetup_r+0x16>
 8000abc:	4628      	mov	r0, r5
 8000abe:	f000 f97d 	bl	8000dbc <__sinit>
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <__swsetup_r+0xd0>)
 8000ac4:	429c      	cmp	r4, r3
 8000ac6:	d10f      	bne.n	8000ae8 <__swsetup_r+0x3c>
 8000ac8:	686c      	ldr	r4, [r5, #4]
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ad0:	0719      	lsls	r1, r3, #28
 8000ad2:	d42c      	bmi.n	8000b2e <__swsetup_r+0x82>
 8000ad4:	06dd      	lsls	r5, r3, #27
 8000ad6:	d411      	bmi.n	8000afc <__swsetup_r+0x50>
 8000ad8:	2309      	movs	r3, #9
 8000ada:	6033      	str	r3, [r6, #0]
 8000adc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ae0:	81a3      	strh	r3, [r4, #12]
 8000ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae6:	e03e      	b.n	8000b66 <__swsetup_r+0xba>
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <__swsetup_r+0xd4>)
 8000aea:	429c      	cmp	r4, r3
 8000aec:	d101      	bne.n	8000af2 <__swsetup_r+0x46>
 8000aee:	68ac      	ldr	r4, [r5, #8]
 8000af0:	e7eb      	b.n	8000aca <__swsetup_r+0x1e>
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <__swsetup_r+0xd8>)
 8000af4:	429c      	cmp	r4, r3
 8000af6:	bf08      	it	eq
 8000af8:	68ec      	ldreq	r4, [r5, #12]
 8000afa:	e7e6      	b.n	8000aca <__swsetup_r+0x1e>
 8000afc:	0758      	lsls	r0, r3, #29
 8000afe:	d512      	bpl.n	8000b26 <__swsetup_r+0x7a>
 8000b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b02:	b141      	cbz	r1, 8000b16 <__swsetup_r+0x6a>
 8000b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b08:	4299      	cmp	r1, r3
 8000b0a:	d002      	beq.n	8000b12 <__swsetup_r+0x66>
 8000b0c:	4630      	mov	r0, r6
 8000b0e:	f000 fa5b 	bl	8000fc8 <_free_r>
 8000b12:	2300      	movs	r3, #0
 8000b14:	6363      	str	r3, [r4, #52]	; 0x34
 8000b16:	89a3      	ldrh	r3, [r4, #12]
 8000b18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b1c:	81a3      	strh	r3, [r4, #12]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	6063      	str	r3, [r4, #4]
 8000b22:	6923      	ldr	r3, [r4, #16]
 8000b24:	6023      	str	r3, [r4, #0]
 8000b26:	89a3      	ldrh	r3, [r4, #12]
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	81a3      	strh	r3, [r4, #12]
 8000b2e:	6923      	ldr	r3, [r4, #16]
 8000b30:	b94b      	cbnz	r3, 8000b46 <__swsetup_r+0x9a>
 8000b32:	89a3      	ldrh	r3, [r4, #12]
 8000b34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b3c:	d003      	beq.n	8000b46 <__swsetup_r+0x9a>
 8000b3e:	4621      	mov	r1, r4
 8000b40:	4630      	mov	r0, r6
 8000b42:	f000 fa01 	bl	8000f48 <__smakebuf_r>
 8000b46:	89a0      	ldrh	r0, [r4, #12]
 8000b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b4c:	f010 0301 	ands.w	r3, r0, #1
 8000b50:	d00a      	beq.n	8000b68 <__swsetup_r+0xbc>
 8000b52:	2300      	movs	r3, #0
 8000b54:	60a3      	str	r3, [r4, #8]
 8000b56:	6963      	ldr	r3, [r4, #20]
 8000b58:	425b      	negs	r3, r3
 8000b5a:	61a3      	str	r3, [r4, #24]
 8000b5c:	6923      	ldr	r3, [r4, #16]
 8000b5e:	b943      	cbnz	r3, 8000b72 <__swsetup_r+0xc6>
 8000b60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b64:	d1ba      	bne.n	8000adc <__swsetup_r+0x30>
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	0781      	lsls	r1, r0, #30
 8000b6a:	bf58      	it	pl
 8000b6c:	6963      	ldrpl	r3, [r4, #20]
 8000b6e:	60a3      	str	r3, [r4, #8]
 8000b70:	e7f4      	b.n	8000b5c <__swsetup_r+0xb0>
 8000b72:	2000      	movs	r0, #0
 8000b74:	e7f7      	b.n	8000b66 <__swsetup_r+0xba>
 8000b76:	bf00      	nop
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	080013b4 	.word	0x080013b4
 8000b80:	080013d4 	.word	0x080013d4
 8000b84:	08001394 	.word	0x08001394

08000b88 <__sflush_r>:
 8000b88:	898a      	ldrh	r2, [r1, #12]
 8000b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b8e:	4605      	mov	r5, r0
 8000b90:	0710      	lsls	r0, r2, #28
 8000b92:	460c      	mov	r4, r1
 8000b94:	d458      	bmi.n	8000c48 <__sflush_r+0xc0>
 8000b96:	684b      	ldr	r3, [r1, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dc05      	bgt.n	8000ba8 <__sflush_r+0x20>
 8000b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	dc02      	bgt.n	8000ba8 <__sflush_r+0x20>
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d0f9      	beq.n	8000ba2 <__sflush_r+0x1a>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000bb4:	682f      	ldr	r7, [r5, #0]
 8000bb6:	602b      	str	r3, [r5, #0]
 8000bb8:	d032      	beq.n	8000c20 <__sflush_r+0x98>
 8000bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000bbc:	89a3      	ldrh	r3, [r4, #12]
 8000bbe:	075a      	lsls	r2, r3, #29
 8000bc0:	d505      	bpl.n	8000bce <__sflush_r+0x46>
 8000bc2:	6863      	ldr	r3, [r4, #4]
 8000bc4:	1ac0      	subs	r0, r0, r3
 8000bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bc8:	b10b      	cbz	r3, 8000bce <__sflush_r+0x46>
 8000bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bcc:	1ac0      	subs	r0, r0, r3
 8000bce:	2300      	movs	r3, #0
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bd4:	6a21      	ldr	r1, [r4, #32]
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	47b0      	blx	r6
 8000bda:	1c43      	adds	r3, r0, #1
 8000bdc:	89a3      	ldrh	r3, [r4, #12]
 8000bde:	d106      	bne.n	8000bee <__sflush_r+0x66>
 8000be0:	6829      	ldr	r1, [r5, #0]
 8000be2:	291d      	cmp	r1, #29
 8000be4:	d82c      	bhi.n	8000c40 <__sflush_r+0xb8>
 8000be6:	4a2a      	ldr	r2, [pc, #168]	; (8000c90 <__sflush_r+0x108>)
 8000be8:	40ca      	lsrs	r2, r1
 8000bea:	07d6      	lsls	r6, r2, #31
 8000bec:	d528      	bpl.n	8000c40 <__sflush_r+0xb8>
 8000bee:	2200      	movs	r2, #0
 8000bf0:	6062      	str	r2, [r4, #4]
 8000bf2:	04d9      	lsls	r1, r3, #19
 8000bf4:	6922      	ldr	r2, [r4, #16]
 8000bf6:	6022      	str	r2, [r4, #0]
 8000bf8:	d504      	bpl.n	8000c04 <__sflush_r+0x7c>
 8000bfa:	1c42      	adds	r2, r0, #1
 8000bfc:	d101      	bne.n	8000c02 <__sflush_r+0x7a>
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	b903      	cbnz	r3, 8000c04 <__sflush_r+0x7c>
 8000c02:	6560      	str	r0, [r4, #84]	; 0x54
 8000c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c06:	602f      	str	r7, [r5, #0]
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	d0ca      	beq.n	8000ba2 <__sflush_r+0x1a>
 8000c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d002      	beq.n	8000c1a <__sflush_r+0x92>
 8000c14:	4628      	mov	r0, r5
 8000c16:	f000 f9d7 	bl	8000fc8 <_free_r>
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8000c1e:	e7c1      	b.n	8000ba4 <__sflush_r+0x1c>
 8000c20:	6a21      	ldr	r1, [r4, #32]
 8000c22:	2301      	movs	r3, #1
 8000c24:	4628      	mov	r0, r5
 8000c26:	47b0      	blx	r6
 8000c28:	1c41      	adds	r1, r0, #1
 8000c2a:	d1c7      	bne.n	8000bbc <__sflush_r+0x34>
 8000c2c:	682b      	ldr	r3, [r5, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0c4      	beq.n	8000bbc <__sflush_r+0x34>
 8000c32:	2b1d      	cmp	r3, #29
 8000c34:	d001      	beq.n	8000c3a <__sflush_r+0xb2>
 8000c36:	2b16      	cmp	r3, #22
 8000c38:	d101      	bne.n	8000c3e <__sflush_r+0xb6>
 8000c3a:	602f      	str	r7, [r5, #0]
 8000c3c:	e7b1      	b.n	8000ba2 <__sflush_r+0x1a>
 8000c3e:	89a3      	ldrh	r3, [r4, #12]
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	81a3      	strh	r3, [r4, #12]
 8000c46:	e7ad      	b.n	8000ba4 <__sflush_r+0x1c>
 8000c48:	690f      	ldr	r7, [r1, #16]
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d0a9      	beq.n	8000ba2 <__sflush_r+0x1a>
 8000c4e:	0793      	lsls	r3, r2, #30
 8000c50:	680e      	ldr	r6, [r1, #0]
 8000c52:	bf08      	it	eq
 8000c54:	694b      	ldreq	r3, [r1, #20]
 8000c56:	600f      	str	r7, [r1, #0]
 8000c58:	bf18      	it	ne
 8000c5a:	2300      	movne	r3, #0
 8000c5c:	eba6 0807 	sub.w	r8, r6, r7
 8000c60:	608b      	str	r3, [r1, #8]
 8000c62:	f1b8 0f00 	cmp.w	r8, #0
 8000c66:	dd9c      	ble.n	8000ba2 <__sflush_r+0x1a>
 8000c68:	6a21      	ldr	r1, [r4, #32]
 8000c6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	463a      	mov	r2, r7
 8000c70:	4628      	mov	r0, r5
 8000c72:	47b0      	blx	r6
 8000c74:	2800      	cmp	r0, #0
 8000c76:	dc06      	bgt.n	8000c86 <__sflush_r+0xfe>
 8000c78:	89a3      	ldrh	r3, [r4, #12]
 8000c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7e:	81a3      	strh	r3, [r4, #12]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	e78e      	b.n	8000ba4 <__sflush_r+0x1c>
 8000c86:	4407      	add	r7, r0
 8000c88:	eba8 0800 	sub.w	r8, r8, r0
 8000c8c:	e7e9      	b.n	8000c62 <__sflush_r+0xda>
 8000c8e:	bf00      	nop
 8000c90:	20400001 	.word	0x20400001

08000c94 <_fflush_r>:
 8000c94:	b538      	push	{r3, r4, r5, lr}
 8000c96:	690b      	ldr	r3, [r1, #16]
 8000c98:	4605      	mov	r5, r0
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	b913      	cbnz	r3, 8000ca4 <_fflush_r+0x10>
 8000c9e:	2500      	movs	r5, #0
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	bd38      	pop	{r3, r4, r5, pc}
 8000ca4:	b118      	cbz	r0, 8000cae <_fflush_r+0x1a>
 8000ca6:	6983      	ldr	r3, [r0, #24]
 8000ca8:	b90b      	cbnz	r3, 8000cae <_fflush_r+0x1a>
 8000caa:	f000 f887 	bl	8000dbc <__sinit>
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <_fflush_r+0x6c>)
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	d11b      	bne.n	8000cec <_fflush_r+0x58>
 8000cb4:	686c      	ldr	r4, [r5, #4]
 8000cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0ef      	beq.n	8000c9e <_fflush_r+0xa>
 8000cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000cc0:	07d0      	lsls	r0, r2, #31
 8000cc2:	d404      	bmi.n	8000cce <_fflush_r+0x3a>
 8000cc4:	0599      	lsls	r1, r3, #22
 8000cc6:	d402      	bmi.n	8000cce <_fflush_r+0x3a>
 8000cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cca:	f000 f915 	bl	8000ef8 <__retarget_lock_acquire_recursive>
 8000cce:	4628      	mov	r0, r5
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	f7ff ff59 	bl	8000b88 <__sflush_r>
 8000cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cd8:	07da      	lsls	r2, r3, #31
 8000cda:	4605      	mov	r5, r0
 8000cdc:	d4e0      	bmi.n	8000ca0 <_fflush_r+0xc>
 8000cde:	89a3      	ldrh	r3, [r4, #12]
 8000ce0:	059b      	lsls	r3, r3, #22
 8000ce2:	d4dd      	bmi.n	8000ca0 <_fflush_r+0xc>
 8000ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ce6:	f000 f908 	bl	8000efa <__retarget_lock_release_recursive>
 8000cea:	e7d9      	b.n	8000ca0 <_fflush_r+0xc>
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <_fflush_r+0x70>)
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	d101      	bne.n	8000cf6 <_fflush_r+0x62>
 8000cf2:	68ac      	ldr	r4, [r5, #8]
 8000cf4:	e7df      	b.n	8000cb6 <_fflush_r+0x22>
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <_fflush_r+0x74>)
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	bf08      	it	eq
 8000cfc:	68ec      	ldreq	r4, [r5, #12]
 8000cfe:	e7da      	b.n	8000cb6 <_fflush_r+0x22>
 8000d00:	080013b4 	.word	0x080013b4
 8000d04:	080013d4 	.word	0x080013d4
 8000d08:	08001394 	.word	0x08001394

08000d0c <std>:
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	4604      	mov	r4, r0
 8000d12:	e9c0 3300 	strd	r3, r3, [r0]
 8000d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d1a:	6083      	str	r3, [r0, #8]
 8000d1c:	8181      	strh	r1, [r0, #12]
 8000d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8000d20:	81c2      	strh	r2, [r0, #14]
 8000d22:	6183      	str	r3, [r0, #24]
 8000d24:	4619      	mov	r1, r3
 8000d26:	2208      	movs	r2, #8
 8000d28:	305c      	adds	r0, #92	; 0x5c
 8000d2a:	f7ff fdef 	bl	800090c <memset>
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <std+0x38>)
 8000d30:	6263      	str	r3, [r4, #36]	; 0x24
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <std+0x3c>)
 8000d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <std+0x40>)
 8000d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <std+0x44>)
 8000d3c:	6224      	str	r4, [r4, #32]
 8000d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8000d40:	bd10      	pop	{r4, pc}
 8000d42:	bf00      	nop
 8000d44:	080011a9 	.word	0x080011a9
 8000d48:	080011cb 	.word	0x080011cb
 8000d4c:	08001203 	.word	0x08001203
 8000d50:	08001227 	.word	0x08001227

08000d54 <_cleanup_r>:
 8000d54:	4901      	ldr	r1, [pc, #4]	; (8000d5c <_cleanup_r+0x8>)
 8000d56:	f000 b8af 	b.w	8000eb8 <_fwalk_reent>
 8000d5a:	bf00      	nop
 8000d5c:	08000c95 	.word	0x08000c95

08000d60 <__sfmoreglue>:
 8000d60:	b570      	push	{r4, r5, r6, lr}
 8000d62:	2268      	movs	r2, #104	; 0x68
 8000d64:	1e4d      	subs	r5, r1, #1
 8000d66:	4355      	muls	r5, r2
 8000d68:	460e      	mov	r6, r1
 8000d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d6e:	f000 f997 	bl	80010a0 <_malloc_r>
 8000d72:	4604      	mov	r4, r0
 8000d74:	b140      	cbz	r0, 8000d88 <__sfmoreglue+0x28>
 8000d76:	2100      	movs	r1, #0
 8000d78:	e9c0 1600 	strd	r1, r6, [r0]
 8000d7c:	300c      	adds	r0, #12
 8000d7e:	60a0      	str	r0, [r4, #8]
 8000d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d84:	f7ff fdc2 	bl	800090c <memset>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}

08000d8c <__sfp_lock_acquire>:
 8000d8c:	4801      	ldr	r0, [pc, #4]	; (8000d94 <__sfp_lock_acquire+0x8>)
 8000d8e:	f000 b8b3 	b.w	8000ef8 <__retarget_lock_acquire_recursive>
 8000d92:	bf00      	nop
 8000d94:	200000dd 	.word	0x200000dd

08000d98 <__sfp_lock_release>:
 8000d98:	4801      	ldr	r0, [pc, #4]	; (8000da0 <__sfp_lock_release+0x8>)
 8000d9a:	f000 b8ae 	b.w	8000efa <__retarget_lock_release_recursive>
 8000d9e:	bf00      	nop
 8000da0:	200000dd 	.word	0x200000dd

08000da4 <__sinit_lock_acquire>:
 8000da4:	4801      	ldr	r0, [pc, #4]	; (8000dac <__sinit_lock_acquire+0x8>)
 8000da6:	f000 b8a7 	b.w	8000ef8 <__retarget_lock_acquire_recursive>
 8000daa:	bf00      	nop
 8000dac:	200000de 	.word	0x200000de

08000db0 <__sinit_lock_release>:
 8000db0:	4801      	ldr	r0, [pc, #4]	; (8000db8 <__sinit_lock_release+0x8>)
 8000db2:	f000 b8a2 	b.w	8000efa <__retarget_lock_release_recursive>
 8000db6:	bf00      	nop
 8000db8:	200000de 	.word	0x200000de

08000dbc <__sinit>:
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	f7ff fff0 	bl	8000da4 <__sinit_lock_acquire>
 8000dc4:	69a3      	ldr	r3, [r4, #24]
 8000dc6:	b11b      	cbz	r3, 8000dd0 <__sinit+0x14>
 8000dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dcc:	f7ff bff0 	b.w	8000db0 <__sinit_lock_release>
 8000dd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000dd4:	6523      	str	r3, [r4, #80]	; 0x50
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <__sinit+0x68>)
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <__sinit+0x6c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	62a2      	str	r2, [r4, #40]	; 0x28
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	bf04      	itt	eq
 8000de2:	2301      	moveq	r3, #1
 8000de4:	61a3      	streq	r3, [r4, #24]
 8000de6:	4620      	mov	r0, r4
 8000de8:	f000 f820 	bl	8000e2c <__sfp>
 8000dec:	6060      	str	r0, [r4, #4]
 8000dee:	4620      	mov	r0, r4
 8000df0:	f000 f81c 	bl	8000e2c <__sfp>
 8000df4:	60a0      	str	r0, [r4, #8]
 8000df6:	4620      	mov	r0, r4
 8000df8:	f000 f818 	bl	8000e2c <__sfp>
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60e0      	str	r0, [r4, #12]
 8000e00:	2104      	movs	r1, #4
 8000e02:	6860      	ldr	r0, [r4, #4]
 8000e04:	f7ff ff82 	bl	8000d0c <std>
 8000e08:	68a0      	ldr	r0, [r4, #8]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2109      	movs	r1, #9
 8000e0e:	f7ff ff7d 	bl	8000d0c <std>
 8000e12:	68e0      	ldr	r0, [r4, #12]
 8000e14:	2202      	movs	r2, #2
 8000e16:	2112      	movs	r1, #18
 8000e18:	f7ff ff78 	bl	8000d0c <std>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61a3      	str	r3, [r4, #24]
 8000e20:	e7d2      	b.n	8000dc8 <__sinit+0xc>
 8000e22:	bf00      	nop
 8000e24:	08001390 	.word	0x08001390
 8000e28:	08000d55 	.word	0x08000d55

08000e2c <__sfp>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	4607      	mov	r7, r0
 8000e30:	f7ff ffac 	bl	8000d8c <__sfp_lock_acquire>
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <__sfp+0x84>)
 8000e36:	681e      	ldr	r6, [r3, #0]
 8000e38:	69b3      	ldr	r3, [r6, #24]
 8000e3a:	b913      	cbnz	r3, 8000e42 <__sfp+0x16>
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f7ff ffbd 	bl	8000dbc <__sinit>
 8000e42:	3648      	adds	r6, #72	; 0x48
 8000e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	d503      	bpl.n	8000e54 <__sfp+0x28>
 8000e4c:	6833      	ldr	r3, [r6, #0]
 8000e4e:	b30b      	cbz	r3, 8000e94 <__sfp+0x68>
 8000e50:	6836      	ldr	r6, [r6, #0]
 8000e52:	e7f7      	b.n	8000e44 <__sfp+0x18>
 8000e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e58:	b9d5      	cbnz	r5, 8000e90 <__sfp+0x64>
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <__sfp+0x88>)
 8000e5c:	60e3      	str	r3, [r4, #12]
 8000e5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e62:	6665      	str	r5, [r4, #100]	; 0x64
 8000e64:	f000 f847 	bl	8000ef6 <__retarget_lock_init_recursive>
 8000e68:	f7ff ff96 	bl	8000d98 <__sfp_lock_release>
 8000e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e74:	6025      	str	r5, [r4, #0]
 8000e76:	61a5      	str	r5, [r4, #24]
 8000e78:	2208      	movs	r2, #8
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e80:	f7ff fd44 	bl	800090c <memset>
 8000e84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e90:	3468      	adds	r4, #104	; 0x68
 8000e92:	e7d9      	b.n	8000e48 <__sfp+0x1c>
 8000e94:	2104      	movs	r1, #4
 8000e96:	4638      	mov	r0, r7
 8000e98:	f7ff ff62 	bl	8000d60 <__sfmoreglue>
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	6030      	str	r0, [r6, #0]
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d1d5      	bne.n	8000e50 <__sfp+0x24>
 8000ea4:	f7ff ff78 	bl	8000d98 <__sfp_lock_release>
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	e7ee      	b.n	8000e8c <__sfp+0x60>
 8000eae:	bf00      	nop
 8000eb0:	08001390 	.word	0x08001390
 8000eb4:	ffff0001 	.word	0xffff0001

08000eb8 <_fwalk_reent>:
 8000eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ebc:	4606      	mov	r6, r0
 8000ebe:	4688      	mov	r8, r1
 8000ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000eca:	f1b9 0901 	subs.w	r9, r9, #1
 8000ece:	d505      	bpl.n	8000edc <_fwalk_reent+0x24>
 8000ed0:	6824      	ldr	r4, [r4, #0]
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d1f7      	bne.n	8000ec6 <_fwalk_reent+0xe>
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000edc:	89ab      	ldrh	r3, [r5, #12]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d907      	bls.n	8000ef2 <_fwalk_reent+0x3a>
 8000ee2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	d003      	beq.n	8000ef2 <_fwalk_reent+0x3a>
 8000eea:	4629      	mov	r1, r5
 8000eec:	4630      	mov	r0, r6
 8000eee:	47c0      	blx	r8
 8000ef0:	4307      	orrs	r7, r0
 8000ef2:	3568      	adds	r5, #104	; 0x68
 8000ef4:	e7e9      	b.n	8000eca <_fwalk_reent+0x12>

08000ef6 <__retarget_lock_init_recursive>:
 8000ef6:	4770      	bx	lr

08000ef8 <__retarget_lock_acquire_recursive>:
 8000ef8:	4770      	bx	lr

08000efa <__retarget_lock_release_recursive>:
 8000efa:	4770      	bx	lr

08000efc <__swhatbuf_r>:
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	460e      	mov	r6, r1
 8000f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f04:	2900      	cmp	r1, #0
 8000f06:	b096      	sub	sp, #88	; 0x58
 8000f08:	4614      	mov	r4, r2
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	da08      	bge.n	8000f20 <__swhatbuf_r+0x24>
 8000f0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000f12:	2200      	movs	r2, #0
 8000f14:	602a      	str	r2, [r5, #0]
 8000f16:	061a      	lsls	r2, r3, #24
 8000f18:	d410      	bmi.n	8000f3c <__swhatbuf_r+0x40>
 8000f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1e:	e00e      	b.n	8000f3e <__swhatbuf_r+0x42>
 8000f20:	466a      	mov	r2, sp
 8000f22:	f000 f9a7 	bl	8001274 <_fstat_r>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	dbf1      	blt.n	8000f0e <__swhatbuf_r+0x12>
 8000f2a:	9a01      	ldr	r2, [sp, #4]
 8000f2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f34:	425a      	negs	r2, r3
 8000f36:	415a      	adcs	r2, r3
 8000f38:	602a      	str	r2, [r5, #0]
 8000f3a:	e7ee      	b.n	8000f1a <__swhatbuf_r+0x1e>
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	2000      	movs	r0, #0
 8000f40:	6023      	str	r3, [r4, #0]
 8000f42:	b016      	add	sp, #88	; 0x58
 8000f44:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f48 <__smakebuf_r>:
 8000f48:	898b      	ldrh	r3, [r1, #12]
 8000f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f4c:	079d      	lsls	r5, r3, #30
 8000f4e:	4606      	mov	r6, r0
 8000f50:	460c      	mov	r4, r1
 8000f52:	d507      	bpl.n	8000f64 <__smakebuf_r+0x1c>
 8000f54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	6123      	str	r3, [r4, #16]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	6163      	str	r3, [r4, #20]
 8000f60:	b002      	add	sp, #8
 8000f62:	bd70      	pop	{r4, r5, r6, pc}
 8000f64:	ab01      	add	r3, sp, #4
 8000f66:	466a      	mov	r2, sp
 8000f68:	f7ff ffc8 	bl	8000efc <__swhatbuf_r>
 8000f6c:	9900      	ldr	r1, [sp, #0]
 8000f6e:	4605      	mov	r5, r0
 8000f70:	4630      	mov	r0, r6
 8000f72:	f000 f895 	bl	80010a0 <_malloc_r>
 8000f76:	b948      	cbnz	r0, 8000f8c <__smakebuf_r+0x44>
 8000f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f7c:	059a      	lsls	r2, r3, #22
 8000f7e:	d4ef      	bmi.n	8000f60 <__smakebuf_r+0x18>
 8000f80:	f023 0303 	bic.w	r3, r3, #3
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	81a3      	strh	r3, [r4, #12]
 8000f8a:	e7e3      	b.n	8000f54 <__smakebuf_r+0xc>
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <__smakebuf_r+0x7c>)
 8000f8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	6020      	str	r0, [r4, #0]
 8000f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f98:	81a3      	strh	r3, [r4, #12]
 8000f9a:	9b00      	ldr	r3, [sp, #0]
 8000f9c:	6163      	str	r3, [r4, #20]
 8000f9e:	9b01      	ldr	r3, [sp, #4]
 8000fa0:	6120      	str	r0, [r4, #16]
 8000fa2:	b15b      	cbz	r3, 8000fbc <__smakebuf_r+0x74>
 8000fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fa8:	4630      	mov	r0, r6
 8000faa:	f000 f975 	bl	8001298 <_isatty_r>
 8000fae:	b128      	cbz	r0, 8000fbc <__smakebuf_r+0x74>
 8000fb0:	89a3      	ldrh	r3, [r4, #12]
 8000fb2:	f023 0303 	bic.w	r3, r3, #3
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	81a3      	strh	r3, [r4, #12]
 8000fbc:	89a0      	ldrh	r0, [r4, #12]
 8000fbe:	4305      	orrs	r5, r0
 8000fc0:	81a5      	strh	r5, [r4, #12]
 8000fc2:	e7cd      	b.n	8000f60 <__smakebuf_r+0x18>
 8000fc4:	08000d55 	.word	0x08000d55

08000fc8 <_free_r>:
 8000fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fca:	2900      	cmp	r1, #0
 8000fcc:	d044      	beq.n	8001058 <_free_r+0x90>
 8000fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fd2:	9001      	str	r0, [sp, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f1a1 0404 	sub.w	r4, r1, #4
 8000fda:	bfb8      	it	lt
 8000fdc:	18e4      	addlt	r4, r4, r3
 8000fde:	f000 f97d 	bl	80012dc <__malloc_lock>
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <_free_r+0x94>)
 8000fe4:	9801      	ldr	r0, [sp, #4]
 8000fe6:	6813      	ldr	r3, [r2, #0]
 8000fe8:	b933      	cbnz	r3, 8000ff8 <_free_r+0x30>
 8000fea:	6063      	str	r3, [r4, #4]
 8000fec:	6014      	str	r4, [r2, #0]
 8000fee:	b003      	add	sp, #12
 8000ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ff4:	f000 b978 	b.w	80012e8 <__malloc_unlock>
 8000ff8:	42a3      	cmp	r3, r4
 8000ffa:	d908      	bls.n	800100e <_free_r+0x46>
 8000ffc:	6825      	ldr	r5, [r4, #0]
 8000ffe:	1961      	adds	r1, r4, r5
 8001000:	428b      	cmp	r3, r1
 8001002:	bf01      	itttt	eq
 8001004:	6819      	ldreq	r1, [r3, #0]
 8001006:	685b      	ldreq	r3, [r3, #4]
 8001008:	1949      	addeq	r1, r1, r5
 800100a:	6021      	streq	r1, [r4, #0]
 800100c:	e7ed      	b.n	8000fea <_free_r+0x22>
 800100e:	461a      	mov	r2, r3
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	b10b      	cbz	r3, 8001018 <_free_r+0x50>
 8001014:	42a3      	cmp	r3, r4
 8001016:	d9fa      	bls.n	800100e <_free_r+0x46>
 8001018:	6811      	ldr	r1, [r2, #0]
 800101a:	1855      	adds	r5, r2, r1
 800101c:	42a5      	cmp	r5, r4
 800101e:	d10b      	bne.n	8001038 <_free_r+0x70>
 8001020:	6824      	ldr	r4, [r4, #0]
 8001022:	4421      	add	r1, r4
 8001024:	1854      	adds	r4, r2, r1
 8001026:	42a3      	cmp	r3, r4
 8001028:	6011      	str	r1, [r2, #0]
 800102a:	d1e0      	bne.n	8000fee <_free_r+0x26>
 800102c:	681c      	ldr	r4, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	6053      	str	r3, [r2, #4]
 8001032:	4421      	add	r1, r4
 8001034:	6011      	str	r1, [r2, #0]
 8001036:	e7da      	b.n	8000fee <_free_r+0x26>
 8001038:	d902      	bls.n	8001040 <_free_r+0x78>
 800103a:	230c      	movs	r3, #12
 800103c:	6003      	str	r3, [r0, #0]
 800103e:	e7d6      	b.n	8000fee <_free_r+0x26>
 8001040:	6825      	ldr	r5, [r4, #0]
 8001042:	1961      	adds	r1, r4, r5
 8001044:	428b      	cmp	r3, r1
 8001046:	bf04      	itt	eq
 8001048:	6819      	ldreq	r1, [r3, #0]
 800104a:	685b      	ldreq	r3, [r3, #4]
 800104c:	6063      	str	r3, [r4, #4]
 800104e:	bf04      	itt	eq
 8001050:	1949      	addeq	r1, r1, r5
 8001052:	6021      	streq	r1, [r4, #0]
 8001054:	6054      	str	r4, [r2, #4]
 8001056:	e7ca      	b.n	8000fee <_free_r+0x26>
 8001058:	b003      	add	sp, #12
 800105a:	bd30      	pop	{r4, r5, pc}
 800105c:	200000e0 	.word	0x200000e0

08001060 <sbrk_aligned>:
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	4e0e      	ldr	r6, [pc, #56]	; (800109c <sbrk_aligned+0x3c>)
 8001064:	460c      	mov	r4, r1
 8001066:	6831      	ldr	r1, [r6, #0]
 8001068:	4605      	mov	r5, r0
 800106a:	b911      	cbnz	r1, 8001072 <sbrk_aligned+0x12>
 800106c:	f000 f88c 	bl	8001188 <_sbrk_r>
 8001070:	6030      	str	r0, [r6, #0]
 8001072:	4621      	mov	r1, r4
 8001074:	4628      	mov	r0, r5
 8001076:	f000 f887 	bl	8001188 <_sbrk_r>
 800107a:	1c43      	adds	r3, r0, #1
 800107c:	d00a      	beq.n	8001094 <sbrk_aligned+0x34>
 800107e:	1cc4      	adds	r4, r0, #3
 8001080:	f024 0403 	bic.w	r4, r4, #3
 8001084:	42a0      	cmp	r0, r4
 8001086:	d007      	beq.n	8001098 <sbrk_aligned+0x38>
 8001088:	1a21      	subs	r1, r4, r0
 800108a:	4628      	mov	r0, r5
 800108c:	f000 f87c 	bl	8001188 <_sbrk_r>
 8001090:	3001      	adds	r0, #1
 8001092:	d101      	bne.n	8001098 <sbrk_aligned+0x38>
 8001094:	f04f 34ff 	mov.w	r4, #4294967295
 8001098:	4620      	mov	r0, r4
 800109a:	bd70      	pop	{r4, r5, r6, pc}
 800109c:	200000e4 	.word	0x200000e4

080010a0 <_malloc_r>:
 80010a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a4:	1ccd      	adds	r5, r1, #3
 80010a6:	f025 0503 	bic.w	r5, r5, #3
 80010aa:	3508      	adds	r5, #8
 80010ac:	2d0c      	cmp	r5, #12
 80010ae:	bf38      	it	cc
 80010b0:	250c      	movcc	r5, #12
 80010b2:	2d00      	cmp	r5, #0
 80010b4:	4607      	mov	r7, r0
 80010b6:	db01      	blt.n	80010bc <_malloc_r+0x1c>
 80010b8:	42a9      	cmp	r1, r5
 80010ba:	d905      	bls.n	80010c8 <_malloc_r+0x28>
 80010bc:	230c      	movs	r3, #12
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	2600      	movs	r6, #0
 80010c2:	4630      	mov	r0, r6
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010c8:	4e2e      	ldr	r6, [pc, #184]	; (8001184 <_malloc_r+0xe4>)
 80010ca:	f000 f907 	bl	80012dc <__malloc_lock>
 80010ce:	6833      	ldr	r3, [r6, #0]
 80010d0:	461c      	mov	r4, r3
 80010d2:	bb34      	cbnz	r4, 8001122 <_malloc_r+0x82>
 80010d4:	4629      	mov	r1, r5
 80010d6:	4638      	mov	r0, r7
 80010d8:	f7ff ffc2 	bl	8001060 <sbrk_aligned>
 80010dc:	1c43      	adds	r3, r0, #1
 80010de:	4604      	mov	r4, r0
 80010e0:	d14d      	bne.n	800117e <_malloc_r+0xde>
 80010e2:	6834      	ldr	r4, [r6, #0]
 80010e4:	4626      	mov	r6, r4
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d140      	bne.n	800116c <_malloc_r+0xcc>
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	4631      	mov	r1, r6
 80010ee:	4638      	mov	r0, r7
 80010f0:	eb04 0803 	add.w	r8, r4, r3
 80010f4:	f000 f848 	bl	8001188 <_sbrk_r>
 80010f8:	4580      	cmp	r8, r0
 80010fa:	d13a      	bne.n	8001172 <_malloc_r+0xd2>
 80010fc:	6821      	ldr	r1, [r4, #0]
 80010fe:	3503      	adds	r5, #3
 8001100:	1a6d      	subs	r5, r5, r1
 8001102:	f025 0503 	bic.w	r5, r5, #3
 8001106:	3508      	adds	r5, #8
 8001108:	2d0c      	cmp	r5, #12
 800110a:	bf38      	it	cc
 800110c:	250c      	movcc	r5, #12
 800110e:	4629      	mov	r1, r5
 8001110:	4638      	mov	r0, r7
 8001112:	f7ff ffa5 	bl	8001060 <sbrk_aligned>
 8001116:	3001      	adds	r0, #1
 8001118:	d02b      	beq.n	8001172 <_malloc_r+0xd2>
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	442b      	add	r3, r5
 800111e:	6023      	str	r3, [r4, #0]
 8001120:	e00e      	b.n	8001140 <_malloc_r+0xa0>
 8001122:	6822      	ldr	r2, [r4, #0]
 8001124:	1b52      	subs	r2, r2, r5
 8001126:	d41e      	bmi.n	8001166 <_malloc_r+0xc6>
 8001128:	2a0b      	cmp	r2, #11
 800112a:	d916      	bls.n	800115a <_malloc_r+0xba>
 800112c:	1961      	adds	r1, r4, r5
 800112e:	42a3      	cmp	r3, r4
 8001130:	6025      	str	r5, [r4, #0]
 8001132:	bf18      	it	ne
 8001134:	6059      	strne	r1, [r3, #4]
 8001136:	6863      	ldr	r3, [r4, #4]
 8001138:	bf08      	it	eq
 800113a:	6031      	streq	r1, [r6, #0]
 800113c:	5162      	str	r2, [r4, r5]
 800113e:	604b      	str	r3, [r1, #4]
 8001140:	4638      	mov	r0, r7
 8001142:	f104 060b 	add.w	r6, r4, #11
 8001146:	f000 f8cf 	bl	80012e8 <__malloc_unlock>
 800114a:	f026 0607 	bic.w	r6, r6, #7
 800114e:	1d23      	adds	r3, r4, #4
 8001150:	1af2      	subs	r2, r6, r3
 8001152:	d0b6      	beq.n	80010c2 <_malloc_r+0x22>
 8001154:	1b9b      	subs	r3, r3, r6
 8001156:	50a3      	str	r3, [r4, r2]
 8001158:	e7b3      	b.n	80010c2 <_malloc_r+0x22>
 800115a:	6862      	ldr	r2, [r4, #4]
 800115c:	42a3      	cmp	r3, r4
 800115e:	bf0c      	ite	eq
 8001160:	6032      	streq	r2, [r6, #0]
 8001162:	605a      	strne	r2, [r3, #4]
 8001164:	e7ec      	b.n	8001140 <_malloc_r+0xa0>
 8001166:	4623      	mov	r3, r4
 8001168:	6864      	ldr	r4, [r4, #4]
 800116a:	e7b2      	b.n	80010d2 <_malloc_r+0x32>
 800116c:	4634      	mov	r4, r6
 800116e:	6876      	ldr	r6, [r6, #4]
 8001170:	e7b9      	b.n	80010e6 <_malloc_r+0x46>
 8001172:	230c      	movs	r3, #12
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4638      	mov	r0, r7
 8001178:	f000 f8b6 	bl	80012e8 <__malloc_unlock>
 800117c:	e7a1      	b.n	80010c2 <_malloc_r+0x22>
 800117e:	6025      	str	r5, [r4, #0]
 8001180:	e7de      	b.n	8001140 <_malloc_r+0xa0>
 8001182:	bf00      	nop
 8001184:	200000e0 	.word	0x200000e0

08001188 <_sbrk_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4d06      	ldr	r5, [pc, #24]	; (80011a4 <_sbrk_r+0x1c>)
 800118c:	2300      	movs	r3, #0
 800118e:	4604      	mov	r4, r0
 8001190:	4608      	mov	r0, r1
 8001192:	602b      	str	r3, [r5, #0]
 8001194:	f7ff fb30 	bl	80007f8 <_sbrk>
 8001198:	1c43      	adds	r3, r0, #1
 800119a:	d102      	bne.n	80011a2 <_sbrk_r+0x1a>
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	b103      	cbz	r3, 80011a2 <_sbrk_r+0x1a>
 80011a0:	6023      	str	r3, [r4, #0]
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
 80011a4:	200000e8 	.word	0x200000e8

080011a8 <__sread>:
 80011a8:	b510      	push	{r4, lr}
 80011aa:	460c      	mov	r4, r1
 80011ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b0:	f000 f8a0 	bl	80012f4 <_read_r>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	bfab      	itete	ge
 80011b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011ba:	89a3      	ldrhlt	r3, [r4, #12]
 80011bc:	181b      	addge	r3, r3, r0
 80011be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011c2:	bfac      	ite	ge
 80011c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80011c6:	81a3      	strhlt	r3, [r4, #12]
 80011c8:	bd10      	pop	{r4, pc}

080011ca <__swrite>:
 80011ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ce:	461f      	mov	r7, r3
 80011d0:	898b      	ldrh	r3, [r1, #12]
 80011d2:	05db      	lsls	r3, r3, #23
 80011d4:	4605      	mov	r5, r0
 80011d6:	460c      	mov	r4, r1
 80011d8:	4616      	mov	r6, r2
 80011da:	d505      	bpl.n	80011e8 <__swrite+0x1e>
 80011dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e0:	2302      	movs	r3, #2
 80011e2:	2200      	movs	r2, #0
 80011e4:	f000 f868 	bl	80012b8 <_lseek_r>
 80011e8:	89a3      	ldrh	r3, [r4, #12]
 80011ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011f2:	81a3      	strh	r3, [r4, #12]
 80011f4:	4632      	mov	r2, r6
 80011f6:	463b      	mov	r3, r7
 80011f8:	4628      	mov	r0, r5
 80011fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011fe:	f000 b817 	b.w	8001230 <_write_r>

08001202 <__sseek>:
 8001202:	b510      	push	{r4, lr}
 8001204:	460c      	mov	r4, r1
 8001206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800120a:	f000 f855 	bl	80012b8 <_lseek_r>
 800120e:	1c43      	adds	r3, r0, #1
 8001210:	89a3      	ldrh	r3, [r4, #12]
 8001212:	bf15      	itete	ne
 8001214:	6560      	strne	r0, [r4, #84]	; 0x54
 8001216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800121a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800121e:	81a3      	strheq	r3, [r4, #12]
 8001220:	bf18      	it	ne
 8001222:	81a3      	strhne	r3, [r4, #12]
 8001224:	bd10      	pop	{r4, pc}

08001226 <__sclose>:
 8001226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800122a:	f000 b813 	b.w	8001254 <_close_r>
	...

08001230 <_write_r>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4d07      	ldr	r5, [pc, #28]	; (8001250 <_write_r+0x20>)
 8001234:	4604      	mov	r4, r0
 8001236:	4608      	mov	r0, r1
 8001238:	4611      	mov	r1, r2
 800123a:	2200      	movs	r2, #0
 800123c:	602a      	str	r2, [r5, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	f7ff fa89 	bl	8000756 <_write>
 8001244:	1c43      	adds	r3, r0, #1
 8001246:	d102      	bne.n	800124e <_write_r+0x1e>
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	b103      	cbz	r3, 800124e <_write_r+0x1e>
 800124c:	6023      	str	r3, [r4, #0]
 800124e:	bd38      	pop	{r3, r4, r5, pc}
 8001250:	200000e8 	.word	0x200000e8

08001254 <_close_r>:
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d06      	ldr	r5, [pc, #24]	; (8001270 <_close_r+0x1c>)
 8001258:	2300      	movs	r3, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	602b      	str	r3, [r5, #0]
 8001260:	f7ff fa95 	bl	800078e <_close>
 8001264:	1c43      	adds	r3, r0, #1
 8001266:	d102      	bne.n	800126e <_close_r+0x1a>
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	b103      	cbz	r3, 800126e <_close_r+0x1a>
 800126c:	6023      	str	r3, [r4, #0]
 800126e:	bd38      	pop	{r3, r4, r5, pc}
 8001270:	200000e8 	.word	0x200000e8

08001274 <_fstat_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	4d07      	ldr	r5, [pc, #28]	; (8001294 <_fstat_r+0x20>)
 8001278:	2300      	movs	r3, #0
 800127a:	4604      	mov	r4, r0
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	602b      	str	r3, [r5, #0]
 8001282:	f7ff fa90 	bl	80007a6 <_fstat>
 8001286:	1c43      	adds	r3, r0, #1
 8001288:	d102      	bne.n	8001290 <_fstat_r+0x1c>
 800128a:	682b      	ldr	r3, [r5, #0]
 800128c:	b103      	cbz	r3, 8001290 <_fstat_r+0x1c>
 800128e:	6023      	str	r3, [r4, #0]
 8001290:	bd38      	pop	{r3, r4, r5, pc}
 8001292:	bf00      	nop
 8001294:	200000e8 	.word	0x200000e8

08001298 <_isatty_r>:
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4d06      	ldr	r5, [pc, #24]	; (80012b4 <_isatty_r+0x1c>)
 800129c:	2300      	movs	r3, #0
 800129e:	4604      	mov	r4, r0
 80012a0:	4608      	mov	r0, r1
 80012a2:	602b      	str	r3, [r5, #0]
 80012a4:	f7ff fa8f 	bl	80007c6 <_isatty>
 80012a8:	1c43      	adds	r3, r0, #1
 80012aa:	d102      	bne.n	80012b2 <_isatty_r+0x1a>
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	b103      	cbz	r3, 80012b2 <_isatty_r+0x1a>
 80012b0:	6023      	str	r3, [r4, #0]
 80012b2:	bd38      	pop	{r3, r4, r5, pc}
 80012b4:	200000e8 	.word	0x200000e8

080012b8 <_lseek_r>:
 80012b8:	b538      	push	{r3, r4, r5, lr}
 80012ba:	4d07      	ldr	r5, [pc, #28]	; (80012d8 <_lseek_r+0x20>)
 80012bc:	4604      	mov	r4, r0
 80012be:	4608      	mov	r0, r1
 80012c0:	4611      	mov	r1, r2
 80012c2:	2200      	movs	r2, #0
 80012c4:	602a      	str	r2, [r5, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	f7ff fa88 	bl	80007dc <_lseek>
 80012cc:	1c43      	adds	r3, r0, #1
 80012ce:	d102      	bne.n	80012d6 <_lseek_r+0x1e>
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	b103      	cbz	r3, 80012d6 <_lseek_r+0x1e>
 80012d4:	6023      	str	r3, [r4, #0]
 80012d6:	bd38      	pop	{r3, r4, r5, pc}
 80012d8:	200000e8 	.word	0x200000e8

080012dc <__malloc_lock>:
 80012dc:	4801      	ldr	r0, [pc, #4]	; (80012e4 <__malloc_lock+0x8>)
 80012de:	f7ff be0b 	b.w	8000ef8 <__retarget_lock_acquire_recursive>
 80012e2:	bf00      	nop
 80012e4:	200000dc 	.word	0x200000dc

080012e8 <__malloc_unlock>:
 80012e8:	4801      	ldr	r0, [pc, #4]	; (80012f0 <__malloc_unlock+0x8>)
 80012ea:	f7ff be06 	b.w	8000efa <__retarget_lock_release_recursive>
 80012ee:	bf00      	nop
 80012f0:	200000dc 	.word	0x200000dc

080012f4 <_read_r>:
 80012f4:	b538      	push	{r3, r4, r5, lr}
 80012f6:	4d07      	ldr	r5, [pc, #28]	; (8001314 <_read_r+0x20>)
 80012f8:	4604      	mov	r4, r0
 80012fa:	4608      	mov	r0, r1
 80012fc:	4611      	mov	r1, r2
 80012fe:	2200      	movs	r2, #0
 8001300:	602a      	str	r2, [r5, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	f7ff fa0a 	bl	800071c <_read>
 8001308:	1c43      	adds	r3, r0, #1
 800130a:	d102      	bne.n	8001312 <_read_r+0x1e>
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	b103      	cbz	r3, 8001312 <_read_r+0x1e>
 8001310:	6023      	str	r3, [r4, #0]
 8001312:	bd38      	pop	{r3, r4, r5, pc}
 8001314:	200000e8 	.word	0x200000e8

08001318 <_init>:
 8001318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131a:	bf00      	nop
 800131c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800131e:	bc08      	pop	{r3}
 8001320:	469e      	mov	lr, r3
 8001322:	4770      	bx	lr

08001324 <_fini>:
 8001324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001326:	bf00      	nop
 8001328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800132a:	bc08      	pop	{r3}
 800132c:	469e      	mov	lr, r3
 800132e:	4770      	bx	lr
